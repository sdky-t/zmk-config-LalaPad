#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define DEFAULT_LAYER   0
#define OHNISHI_LAYER   1
#define NUM_FUNC_LAYER  2
#define SYMBOL_LAYER    3
#define CTR_STG_LAYER   4
#define BROWSE_LAYER    5
#define MOUSE_R_LAYER   6
#define SCROLL_R_LAYER  7
#define MOUSE_L_LAYER   8
#define SCROLL_L_LAYER  9

// Mouse Scroll Value

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100

// cirque trackpad input&layer control

&glidepoint_listener_R {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 5 2>,
        <&zip_temp_layer MOUSE_R_LAYER 500>;

    lowspeedmode {
        layers = <BROWSE_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 5>,
            <&zip_temp_layer MOUSE_R_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_R_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT)>,
            <&zip_scroll_scaler 2 2>;
    };
};

&glidepoint_listener_L {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
        <&zip_xy_scaler 5 2>,
        <&zip_temp_layer MOUSE_L_LAYER 500>;

    lowspeedmode {
        layers = <BROWSE_LAYER>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>,
            <&zip_xy_scaler 3 4>,
            <&zip_temp_layer MOUSE_L_LAYER 500>;
    };

    scroller {
        layers = <SCROLL_L_LAYER>;
        input-processors =
            <&zip_xy_to_scroll_mapper>,
            <&zip_scroll_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT)>,
            <&zip_scroll_scaler 1 6>;
    };
};

/ {
    behaviors {
        // Encoder to Mouse Scroll

        scroll_up_down: sensor_scroll_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
            label = "SCROLL_UP_DOWN";
        };

        scroll_down_up: sensor_scroll_down_up {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            tap-ms = <20>;
            label = "SCROLL_DOWN_UP";
        };

        scroll_left_right: sensor_scroll_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
            label = "SCROLL_LEFT_RIGHT";
        };

        scroll_right_left: sensor_scroll_right_left {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_RIGHT>, <&msc SCRL_LEFT>;

            tap-ms = <20>;
            label = "SCROLL_RIGHT_LEFT";
        };

        volume_up_down: sensor_volume_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_VOLUME_DOWN>;

            tap-ms = <20>;
            label = "VOLUME_UP_DOWN";
        };

        dot_comma: dot_comma {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp KP_DOT>, <&kp COMMA>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "DOT_COMMA";
        };

        pls_minus: pls_minus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PLUS>, <&kp MINUS>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            label = "PLS_MINUS";
        };

        allow_pageup: allow_pageup {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp PAGE_UP>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEUP";
        };

        allow_pagedown: allow_pagedown {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp PAGE_DOWN>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_PAGEDOWN";
        };

        allow_home: allow_home {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp HOME>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_HOME";
        };

        allow_end: allow_end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp END>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
            label = "ALLOW_END";
        };

        mt2: mod_tap2 {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };

        // 半角（LANG2）に“する”＋ Layer 0 に固定切替

        eisu_to_l0: eisu_to_l0 {
            compatible = "zmk,behavior-macro";
            label = "EISU_TO_L0";
            #binding-cells = <0>;

            // 先にレイヤ固定 → 直後に LANG1 送信

            bindings = <&to 0 &kp LANG2>;
        };

        // かな（LANG1）に“する”＋ Layer 1 に固定切替

        kana_to_l1: kana_to_l1 {
            compatible = "zmk,behavior-macro";
            label = "KANA_TO_L1";
            #binding-cells = <0>;

            // 先にレイヤ固定 → 直後に LANG1 送信

            bindings = <&to 1 &kp LANG1>;
        };

        kakko: kakko {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp LEFT_PARENTHESIS &kp RPAR &kp LEFT>;
            label = "KAKKO";
        };

        doublequote: ten {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_2 &kp DQT &kp DQT &kp LEFT>;
            label = "TEN";
        };

        kagikakko: kagikakko {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LANGUAGE_1 &kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "KAGIKAKKO";
        };

        td_space: td_space {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SPACE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;  // ダブルタップ判定時間
            // 単タップ: 'SPACE'
            // 単ホールド: RSHIFT
            // 単ホールド: RSHIFT
            // ダブルタップ: 'SPACE' を2回送る

            bindings = <&kp SPACE &kp RSHIFT &kp SPACE &kp SPACE>;
        };

        td_kana_to_l1: td_kana_to_l1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_KANA_TO_L1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;  // ダブルタップ判定時間
            // タップ: 自作キー、ホールド: 右Ctrl

            bindings = <&kana_to_l1 &kp RCTRL>;
        };

        td_backspace: td_backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BACKSPACE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;  // ダブルタップ判定時間
            // 単タップ: 'BACKSPACE'
            // 単ホールド: レイヤ3
            // ダブルタップ: 'BACKSPACE' を2回送る
            // ダブルホールド: 'BACKSPACE' を押しっぱなし (OSのオートリピートが効く)

            bindings = <&kp BACKSPACE &mo 3 &kp BACKSPACE &kp BACKSPACE>;
        };

        td_enter: td_enter {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ENTER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;  // ダブルタップ判定時間
            // 単タップ: 'ENTER'
            // 単ホールド: レイヤ2
            // ダブルタップ: 'ENTER' を2回送る
            // ダブルホールド: 'ENTER' を押しっぱなし (OSのオートリピートが効く)

            bindings = <&kp ENTER &mo 2 &kp ENTER &kp ENTER>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            display-name = "Default";
            sensor-bindings = <&scroll_right_left>, <&scroll_up_down>;

            bindings = <
&kp ESC    &kp Q         &kp W         &kp E            &kp R           &kp T          &kp Y          &kp U          &kp I            &kp O               &kp P           &kp LANG1
&kp TAB    &kp A         &kp S         &kp D            &lt 4 F         &kp G          &kp H          &kp J          &kp K            &kp L               &lt 5 MINUS     &mt RCTRL EQUAL
&kp LSHFT  &kp Z         &kp X         &kp C            &kp V           &kp B          &kp N          &kp M          &kp COMMA        &kp PERIOD          &lt 4 SLASH     &mt2 UP BSLH
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &td_space        &td_kana_to_l1  &eisu_to_l0    &kana_to_l1    &td_backspace  &td_enter        &mt RIGHT_ALT LEFT  &mt RCTRL DOWN  &mt RIGHT_SHIFT RIGHT
                         &allow_end    &allow_pagedown  &allow_home     &allow_pageup  &allow_pageup  &allow_home    &allow_pagedown  &allow_end
            >;
        };

        OHNISHI_LAYER {
            display-name = "Ohnishi";
            sensor-bindings = <&scroll_right_left>, <&scroll_up_down>;

            bindings = <
&trans  &kp Q   &kp L       &kp U            &kp COMMA    &kp PERIOD     &kp F          &kp W        &kp R            &kp Y       &kp P    &trans
&trans  &kp E   &kp I       &kp A            &lt 4 O      &kp MINUS      &kp K          &kp T        &kp N            &kp S       &lt 5 H  &trans
&trans  &kp Z   &kp X       &kp C            &kp V        &kp SLASH      &kp G          &kp D        &kp M            &kp J       &lt 4 B  &trans
&trans  &trans  &trans      &trans           &trans       &trans         &trans         &trans       &trans           &trans      &trans   &trans
                &allow_end  &allow_pagedown  &allow_home  &allow_pageup  &allow_pageup  &allow_home  &allow_pagedown  &allow_end
            >;
        };

        NUM_FUNC_LAYER {
            display-name = "num_func_layer";
            sensor-bindings = <&scroll_left_right>, <&scroll_left_right>;

            bindings = <
&kp TILDE  &kp F9  &kp F10  &kp F11  &kp F12  &kp F19          &kp PERCENT     &kp N7  &kp N8  &kp N9  &kp PLUS      &kp MINUS
&trans     &kp F5  &kp F6   &kp F7   &kp F8   &kp LG(V)        &kp PERIOD      &kp N4  &kp N5  &kp N6  &kp N0        &kp EQUAL
&trans     &kp F1  &kp F2   &kp F3   &kp F4   &kp PRINTSCREEN  &kp LANGUAGE_2  &kp N1  &kp N2  &kp N3  &kp ASTERISK  &kp SLASH
&trans     &trans  &trans   &trans   &trans   &trans           &trans          &trans  &trans  &trans  &trans        &trans
                   &trans   &trans   &trans   &trans           &trans          &trans  &trans  &trans
            >;
        };

        SYMBOL_LAYER {
            display-name = "symbol_layer";
            sensor-bindings = <&scroll_right_left>, <&volume_up_down>;

            bindings = <
&trans  &trans  &trans  &trans  &kp LBKT          &kp RBKT           &kakko        &kp AMPS  &kp DOLLAR  &kp CARET  &trans     &trans
&trans  &trans  &trans  &trans  &kp SEMI          &kp COLON          &doublequote  &kp AT    &kp HASH    &kp CARET  &kp UNDER  &trans
&trans  &trans  &trans  &trans  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kagikakko    &kp EXCL  &kp QMARK   &kp TILDE  &kp MINUS  &trans
&trans  &trans  &trans  &trans  &trans            &trans             &trans        &trans    &trans      &trans     &trans     &trans
                &trans  &trans  &trans            &trans             &trans        &trans    &trans      &trans
            >;
        };

        CTR_OFFICE_LAYER {
            display-name = "ctr_stg_layer";
            bindings = <
&trans      &trans       &trans  &trans  &trans  &trans  &trans     &kp HOME    &kp UP        &kp END    &trans       &trans
&trans      &trans       &trans  &trans  &trans  &trans  &kp LC(Z)  &kp LEFT    &kp DOWN      &kp RIGHT  &trans       &trans
&trans      &trans       &trans  &trans  &trans  &trans  &kp LC(Y)  &kp LC(C)   &kp LC(X)     &kp LC(V)  &trans       &trans
&sys_reset  &bootloader  &trans  &trans  &trans  &trans  &trans     &kp DELETE  &kp LEFT_GUI  &trans     &bootloader  &sys_reset
                         &trans  &trans  &trans  &trans  &trans     &trans      &trans        &trans
            >;
        };

        BROWSE_LAYER {
            display-name = "browse_layer";
            sensor-bindings = <&scroll_down_up>, <&volume_up_down>;

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(T)      &kp F15          &kp F16            &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LC(W)      &kp LS(LC(TAB))  &kp LC(TAB)        &kp F5  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp LS(LC(T))  &kp LA(LEFT)     &kp LA(RIGHT)      &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans         &kp LG(TAB)      &kp LC(LG(RIGHT))  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans         &trans           &trans             &trans
            >;
        };

        MOUSE_R_LAYER {
            display-name = "mouse_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp LCLK  &mkp RCLK  &mo 7     &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &mkp MB4   &mkp MB5  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans
            >;
        };

        SCROLL_R_LAYER {
            display-name = "scroll_r_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        MOUSE_L_LAYER {
            display-name = "mouse_l_layer";
            bindings = <
&trans              &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&mo SCROLL_L_LAYER  &mkp RCLK  &mkp MCLK  &mkp LCLK  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans              &trans     &mkp MB5   &mkp MB4   &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans              &trans     &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                               &trans     &trans     &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SCROLL_L_LAYER {
            display-name = "scroll_l_layer";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
